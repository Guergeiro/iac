- include_vars: postgres.yml

- name: Create the directories
  file:
    state: directory
    path: "{{ item }}"
    recurse: yes
    owner: "root"
    group: "root"
  with_items:
      - "{{ docker_dir }}/{{ container_name }}"

- name: Configure postgres network
  community.docker.docker_network:
    name: postgres_network
    state: present
    force: yes

- name: Spin up base {{ container_name }} for database creation
  when:
    - postgres_databases is defined
    - postgres_databases is not string
    - postgres_databases is not mapping
    - postgres_databases is iterable
    - postgres_databases | length > 0
  block:
    - name: Make sure the {{ container_name }} container is created and running
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "bitnami/postgresql:15"
        pull: yes
        state: "started"
        recreate: yes
        env:
          "TZ": "{{ timezone }}"
          "POSTGRESQL_PASSWORD": "{{ postgres_password }}"
        ports: "{{ host_port }}"
        volumes:
          - "{{ docker_dir }}/{{ container_name }}:/bitnami/postgresql"
        networks:
          - name: postgres_network
        comparisons:
          networks: strict
        restart_policy: always
        user: "root:root"

    - name: Install psycopg2-binary
      pip:
        name: psycopg2-binary

    - name: Wait for postgres to be ready
      community.postgresql.postgresql_ping:
        login_host: "0.0.0.0"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
      register: result
      until: result.is_available == true
      retries: 5
      delay: 10
    - name: Create databases
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        login_host: "0.0.0.0"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        encoding: "UTF-8"
      with_items: "{{ postgres_databases }}"

    - name: Remove {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: "absent"

- name: Make sure the {{ container_name }} container is created and running
  community.docker.docker_container:
    name: "{{ container_name }}"
    image: "bitnami/postgresql:15"
    pull: yes
    state: "started"
    recreate: yes
    env:
      "TZ": "{{ timezone }}"
      "POSTGRESQL_PASSWORD": "{{ postgres_password }}"
    volumes:
      - "{{ docker_dir }}/{{ container_name }}:/bitnami/postgresql"
    networks:
      - name: postgres_network
    comparisons:
      networks: strict
    restart_policy: always
    user: "root:root"

- name: Start {{ container_name }} at 5:00 AM
  cron:
    name: "Start {{ container_name }} at 5:00 AM"
    minute: "0"
    hour: "5"
    job: "docker start {{ container_name }}"
